/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var WE = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,22],$V2=[1,33],$V3=[1,23],$V4=[1,24],$V5=[1,19],$V6=[1,21],$V7=[1,31],$V8=[1,30],$V9=[1,29],$Va=[1,32],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,36],$Vo=[1,35],$Vp=[1,47],$Vq=[1,2,5,20,26,27,30,31,35,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],$Vr=[1,50],$Vs=[1,56],$Vt=[1,57],$Vu=[2,152],$Vv=[1,68],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,54],$VE=[1,55],$VF=[1,87],$VG=[1,75],$VH=[1,119],$VI=[1,115],$VJ=[1,113],$VK=[1,128],$VL=[1,116],$VM=[1,121],$VN=[1,122],$VO=[1,123],$VP=[1,124],$VQ=[1,125],$VR=[1,126],$VS=[1,127],$VT=[1,106],$VU=[1,107],$VV=[1,108],$VW=[1,2,5,20,27,30,31,35,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],$VX=[1,134],$VY=[1,2,5,20,25,26,27,30,31,35,43,46,53,54,55,56,57,58,59,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],$VZ=[1,2,5,20,26,27,30,31,35,46,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],$V_=[1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],$V$=[1,152],$V01=[1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,53,54,55,56,57,58,59,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],$V11=[23,30,35,43,60,103,104,105,106,107,108,109,115,116,131,133,134],$V21=[31,73,74],$V31=[2,5,20,26,27,30,31,35,64,65,66,67,73,74,76,78,79,80,90,91,92,93,94,95,96,97,115,116],$V41=[1,170],$V51=[1,172],$V61=[1,2,5,20,25,26,27,30,31,35,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],$V71=[1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,161,165],$V81=[1,175],$V91=[1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,157,161,165],$Va1=[1,176],$Vb1=[1,177],$Vc1=[1,178],$Vd1=[1,179],$Ve1=[1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,150,151,152,153,157,161,165],$Vf1=[1,180],$Vg1=[1,181],$Vh1=[1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,137,138,139,140,145,146,150,151,152,153,157,161,165],$Vi1=[1,182],$Vj1=[1,183],$Vk1=[1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,145,146,150,151,152,153,157,161,165],$Vl1=[1,184],$Vm1=[1,185],$Vn1=[1,186],$Vo1=[1,187],$Vp1=[1,2,5,20,25,26,27,30,31,35,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],$Vq1=[1,200],$Vr1=[1,199],$Vs1=[1,2,20,25,26,27,30,31,35,46,47,53,54,55,56,57,58,59,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],$Vt1=[1,210],$Vu1=[1,213],$Vv1=[1,217],$Vw1=[1,223],$Vx1=[1,2,5,20,21,23,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],$Vy1=[25,46],$Vz1=[1,233],$VA1=[31,46],$VB1=[44,46],$VC1=[1,2,5,20,25,26,27,30,31,35,43,46,47,53,54,55,56,57,58,59,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],$VD1=[1,274],$VE1=[2,131],$VF1=[1,343],$VG1=[1,344];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Source":4,"EOF":5,"Statement":6,"Source1":7,"Declaration_statements":8,"Assignation_statements":9,"Function_statements":10,"Native_statements":11,"Block_statements":12,"If_statements":13,"Iteration_statements":14,"Return_statements":15,"Break_statements":16,"Continue_statements":17,"Switch_statements":18,"Empty_statements":19,"CONSOLE":20,".":21,"LOG":22,"(":23,"Expr":24,")":25,";":26,"GRAHPTS":27,"Expr_statements":28,"ExprNB":29,"OPENBRACE":30,"CLOSEBRACE":31,"Source2":32,"Type":33,"ValStatementL":34,"IDENT":35,"Arguments":36,"initialNo":37,"Expr1_statements":38,"CallExprNoIn":39,"ArrList":40,"Expr1_statement":41,"Arr":42,"[":43,"]":44,"ValStatement":45,",":46,":":47,"ArrayList":48,"ValStatement1":49,"TypeV":50,"AssignmentOperator":51,"AssignmentExpr":52,"=":53,"+=":54,"-=":55,"*=":56,"/=":57,"^=":58,"%=":59,"FUNCTION":60,"ParameterList":61,"FunctionExpr":62,"Statement1":63,"CONTINUE":64,"BREAK":65,"RETURN":66,"SWITCH":67,"CaseBlock":68,"CaseClausesOpt":69,"CaseClauses1":70,"CaseClauses":71,"CaseClause":72,"CASE":73,"DEFAULT":74,"DefaultClause":75,"IF":76,"ELSE":77,"DO":78,"WHILE":79,"FOR":80,"ExprOpt":81,"LeftHandSideExpr":82,"INTOKEN":83,"OFTOKEN":84,"ExprNoInOpt":85,"ExprNoIn":86,"AssignmentExprNoIn":87,"AssignmentExprNoBF":88,"Parameter":89,"STRING":90,"NUMBERS":91,"BOOLEAN":92,"VOID":93,"VAR":94,"CONST":95,"TYPE":96,"LET":97,"Array":98,"ArrayList1":99,"Elements":100,"Element":101,"Literal":102,"NULLTOKEN":103,"TRUETOKEN":104,"FALSETOKEN":105,"NUMBER":106,"CADENA":107,"CADENA1":108,"CADENA2":109,"Property":110,"PropertyList":111,"PrimaryExpr":112,"PrimaryExprNoBrace":113,"ArrayLiteral":114,"PLUSPLUS":115,"MINSMINS":116,"POP":117,"LENGTH":118,"PUSH":119,"ElementList":120,"ArrayLiterals":121,"MemberExpr":122,"MemberExprNoBF":123,"CallExpr":124,"CallExprNoBF":125,"ArgumentList":126,"LeftHandSideExprNoBF":127,"PostfixExpr":128,"PostfixExprNoBF":129,"UnaryExprCommon":130,"+":131,"UnaryExpr":132,"-":133,"!":134,"UnaryExprNoBF":135,"MultiplicativeExpr":136,"*":137,"/":138,"POTENCIA":139,"%":140,"MultiplicativeExprNoBF":141,"AdicionExpr":142,"AdicionExprNoBF":143,"RelacionalExpr":144,"<":145,">":146,"RelacionalExprNoIn":147,"RelacionalExprNoBF":148,"IgualdadExpr":149,"EQQ":150,"NOEQQ":151,"MAQ":152,"MIQ":153,"IgualdadExprNoIn":154,"IgualdadExprNoBF":155,"LogicaYYExpr":156,"AND":157,"LogicaYYExprNoIn":158,"LogicaYYExprNoBF":159,"LogicaOOExpr":160,"OR":161,"LogicaOOExprNoIn":162,"LogicaOOExprNoBF":163,"CondicionTernariaExpr":164,"?":165,"CondicionTernariaExprNoIn":166,"CondicionTernariaExprNoBF":167,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"CONSOLE",21:".",22:"LOG",23:"(",25:")",26:";",27:"GRAHPTS",30:"OPENBRACE",31:"CLOSEBRACE",35:"IDENT",43:"[",44:"]",46:",",47:":",53:"=",54:"+=",55:"-=",56:"*=",57:"/=",58:"^=",59:"%=",60:"FUNCTION",64:"CONTINUE",65:"BREAK",66:"RETURN",67:"SWITCH",73:"CASE",74:"DEFAULT",76:"IF",77:"ELSE",78:"DO",79:"WHILE",80:"FOR",83:"INTOKEN",84:"OFTOKEN",90:"STRING",91:"NUMBERS",92:"BOOLEAN",93:"VOID",94:"VAR",95:"CONST",96:"TYPE",97:"LET",103:"NULLTOKEN",104:"TRUETOKEN",105:"FALSETOKEN",106:"NUMBER",107:"CADENA",108:"CADENA1",109:"CADENA2",115:"PLUSPLUS",116:"MINSMINS",117:"POP",118:"LENGTH",119:"PUSH",131:"+",133:"-",134:"!",137:"*",138:"/",139:"POTENCIA",140:"%",145:"<",146:">",150:"EQQ",151:"NOEQQ",152:"MAQ",153:"MIQ",157:"AND",161:"OR",165:"?"},
productions_: [0,[3,1],[3,1],[4,2],[7,1],[7,2],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,7],[11,4],[11,6],[11,3],[28,2],[28,1],[19,1],[12,2],[12,3],[8,3],[8,2],[8,2],[9,3],[9,2],[9,1],[39,2],[39,2],[39,3],[39,2],[39,1],[41,2],[41,3],[41,2],[41,1],[40,2],[40,1],[42,3],[34,3],[34,1],[45,3],[45,1],[45,4],[45,4],[45,2],[45,4],[45,2],[45,5],[45,5],[45,3],[49,5],[49,3],[37,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[10,7],[10,8],[10,9],[10,10],[10,6],[10,7],[10,8],[10,9],[62,6],[62,7],[62,7],[62,8],[62,5],[62,7],[62,6],[62,7],[32,1],[32,2],[32,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[17,2],[17,1],[16,2],[16,1],[15,2],[15,1],[15,3],[15,2],[18,5],[68,3],[69,0],[69,1],[71,2],[70,2],[70,1],[72,3],[72,4],[72,2],[72,3],[75,2],[75,3],[13,5],[13,7],[14,7],[14,6],[14,5],[14,9],[14,7],[14,8],[14,7],[14,8],[81,0],[81,1],[85,0],[85,1],[24,1],[24,3],[86,1],[86,3],[29,1],[29,3],[61,3],[61,1],[89,3],[89,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[33,2],[33,1],[48,2],[48,1],[99,2],[99,1],[99,1],[98,2],[100,3],[100,1],[101,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[110,3],[110,3],[110,1],[111,1],[111,3],[112,1],[112,2],[112,3],[113,1],[113,1],[113,1],[113,3],[113,1],[38,2],[38,2],[38,2],[38,2],[38,2],[38,3],[38,3],[38,3],[38,3],[38,5],[38,3],[38,6],[38,6],[38,4],[38,7],[38,4],[38,3],[114,2],[114,3],[121,4],[121,3],[120,1],[120,3],[122,1],[122,1],[122,4],[122,3],[123,1],[123,4],[123,3],[124,1],[124,2],[124,4],[124,3],[125,1],[125,2],[125,4],[125,3],[36,2],[36,3],[126,1],[126,3],[82,1],[82,1],[127,1],[127,1],[128,1],[129,1],[130,2],[130,2],[130,2],[132,1],[132,1],[135,1],[135,1],[136,1],[136,3],[136,3],[136,3],[136,3],[141,1],[141,3],[141,3],[141,3],[141,3],[142,1],[142,3],[142,3],[143,1],[143,3],[143,3],[144,1],[144,3],[144,3],[147,1],[147,3],[147,3],[148,1],[148,3],[148,3],[149,1],[149,3],[149,3],[149,3],[149,3],[154,1],[154,3],[154,3],[154,3],[154,3],[155,1],[155,3],[155,3],[155,3],[155,3],[156,1],[156,3],[158,1],[158,3],[159,1],[159,3],[160,1],[160,3],[162,1],[162,3],[163,1],[163,3],[164,1],[164,5],[166,1],[166,5],[167,1],[52,1],[87,1],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ =[];  this.$.push('{\"linea\":\"'+(yylineno+1)+'\",\"S\":['+$$[$0]+']}'); this.$.push(lexicos); this.$.push(sintacticos); return this.$;
break;
case 2:
 this.$ =[]; this.$.push('{}'); this.$.push(lexicos); this.$.push(sintacticos); return this.$;
break;
case 3:

         this.$ = $$[$0-1]+',\n'+$$[$0];
    
break;
case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 85: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98:

        this.$ = $$[$0];
      
break;
case 5: case 86:

        this.$ = $$[$0-1]+',\n'+$$[$0];
      
break;
case 6: case 87:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"\"}';
      
break;
case 19:

            console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
            sintacticos.push('{\"token\":\"'+yytext+'\", \"linea\":\"'+this._$.first_line+'\", \"columna\":\"'+this._$.first_column+'\"}');
            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"\"}';
          
break;
case 20:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"console\","expression":['+$$[$0-2]+']}';
      
break;
case 21:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"graph\","expression":[]}';
        
break;
case 22:

                this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"console\","expression":['+$$[$0-1]+']}';
         
break;
case 23:

                this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"graph\","expression":[]}';
         
break;
case 24: case 28:

            this.$ = $$[$0-1];
        
break;
case 25:

                this.$ = $$[$0];
         
break;
case 26:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"\"}';
    
break;
case 27: case 174:

           this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"\"}';
        
break;
case 29:

            this.$ =  '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"declaration\",\"type\":['+$$[$0-2]+'], \"values\":['+$$[$0-1]+']}';
        
break;
case 30:

                this.$ =  '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"declaration\",\"type\":['+$$[$0-1]+'], \"values\":['+$$[$0]+']}';
         
break;
case 31:

             this.$ =  '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"CallFunction\",\"name\":\"'+$$[$0-1]+'\", \"parameters\":['+$$[$0]+']}';
        
break;
case 32:

            this.$ =  '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"asignation\",\"variable\":\"'+$$[$0-2]+'\",\"params\":[],\"ValExpression\":['+$$[$0-1]+']}';
        
break;
case 33:

           this.$ =  '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"asignation\",\"variable\":\"'+$$[$0-1]+'\",\"params\":[],\"ValExpression\":['+$$[$0]+']}';
        
break;
case 34: case 111: case 114: case 132: case 134: case 135: case 137: case 139: case 142: case 159: case 163: case 164: case 175: case 177: case 180: case 181: case 184: case 206: case 208: case 209: case 212: case 225: case 227: case 228: case 230: case 231: case 232: case 236: case 237: case 238: case 239: case 240: case 245: case 250: case 253: case 256: case 259: case 262: case 265: case 275: case 280: case 282: case 286: case 290: case 292:

        this.$ = $$[$0];
    
break;
case 35:

            this.$ = $$[$0-1] + ',{\"statement\":\"Argument\",\"value\":['+$$[$0]+']}';
        
break;
case 36: case 40:

            this.$ = $$[$0-1] + ',{\"statement\":\"ArrayList\",\"value\":['+$$[$0]+']}';
        
break;
case 37: case 41:

            this.$ = $$[$0-2] + ',{\"statement\":\"Object\",\"value\":\"'+$$[$0]+'\"}';
        
break;
case 38: case 42:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"Object\",\"value\":\"'+$$[$0]+'\"}';
        
break;
case 39: case 43:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"ArrayList\",\"value\":['+$$[$0]+']}';
        
break;
case 44:

            this.$ = $$[$0-1] +',\n'+ $$[$0]
        
break;
case 45: case 48:

            this.$ = $$[$0];
        
break;
case 46:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"MatrizPosition\",\"value\":['+$$[$0-1]+']}';
        
break;
case 47:

            this.$ = $$[$0-2] +',\n'+$$[$0];
        
break;
case 49:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"tipoExpresion\":['+$$[$0]+'],\"name\":\"'+$$[$0-2]+'\",\"ValExpression\":[]}';
        
break;
case 50:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"tipoExpresion\":[],\"name\":\"'+$$[$0]+'\",\"ValExpression\":[]}';
        
break;
case 51:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variableArray\",\"tipoExpresion\":['+$$[$0]+'],\"name\":\"'+$$[$0-3]+'\",\"ValExpression\":[],\"ArrayLength\":['+$$[$0-2]+']}';
        
break;
case 52:

                this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variableArray\",\"tipoExpresion\":['+$$[$0]+'],\"name\":\"'+$$[$0-3]+'\",\"ValExpression\":[],\"ArrayLength\":['+$$[$0-1]+']}';
            
break;
case 53:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variableArray\",\"tipoExpresion\":[],\"name\":\"'+$$[$0-1]+'\",\"ValExpression\":[],\"ArrayLength\":['+$$[$0]+']}';
        
break;
case 54:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"tipoExpresion\":['+$$[$0-1]+'],\"name\":\"'+$$[$0-3]+'\",\"ValExpression\":['+$$[$0]+']}';
        
break;
case 55:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"tipoExpresion\":[],\"name\":\"'+$$[$0-1]+'\",\"ValExpression\":['+$$[$0]+']}';
        
break;
case 56:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variableArray\",\"tipoExpresion\":['+$$[$0-1]+'],\"name\":\"'+$$[$0-4]+'\",\"ValExpression\":['+$$[$0]+'],\"ArrayLength\":['+$$[$0-3]+']}';
        
break;
case 57:

                this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variableArray\",\"tipoExpresion\":['+$$[$0-1]+'],\"name\":\"'+$$[$0-4]+'\",\"ValExpression\":['+$$[$0]+'],\"ArrayLength\":['+$$[$0-2]+']}';
            
break;
case 58:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variableArray\",\"tipoExpresion\":[],\"name\":\"'+$$[$0-2]+'\",\"ValExpression\":['+$$[$0]+'],\"ArrayLength\":['+$$[$0-1]+']}';
        
break;
case 59:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"tipoExpresion\":['+$$[$0-2]+'],\"tipo\":['+$$[$0-4]+'],\"name\":\"'+$$[$0-3]+'\",\"ValExpression\":['+$$[$0]+']}';
        
break;
case 60:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"tipoExpresion\":[],\"tipo\":['+$$[$0-2]+'],\"name\":\"'+$$[$0-1]+'\",\"ValExpression\":['+$$[$0]+']}';
        
break;
case 61:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"operator\":['+$$[$0-1]+'],\"Expression\":['+$$[$0]+']}';
    
break;
case 62: case 63: case 64: case 65: case 66: case 67:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"v\":\"'+$$[$0]+'\"}';
    
break;
case 68:

         this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"v\":\"'+$$[$0]+'\"}';
     
break;
case 69: case 79:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-5]+'\",\"type\":[],\"params\":[],\"body\":['+$$[$0-1]+']}';
    
break;
case 70: case 80:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-6]+'\",\"type\":[],\"params\":['+$$[$0-4]+'],\"body\":['+$$[$0-1]+']}';
    
break;
case 71:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-7]+'\",\"type\":['+$$[$0-3]+'],\"params\":[],\"body\":['+$$[$0-1]+']}';
    
break;
case 72:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-8]+'\",\"type\":['+$$[$0-3]+'],\"params\":['+$$[$0-6]+'],\"body\":['+$$[$0-1]+']}';
    
break;
case 73: case 83:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-4]+'\",\"type\":[],\"params\":[],\"body\":[]}';
    
break;
case 74:

         this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-5]+'\",\"type\":[],\"params\":['+$$[$0-3]+'],\"body\":[]}';
     
break;
case 75:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-6]+'\",\"type\":['+$$[$0-2]+'],\"params\":[],\"body\":[]}';
    
break;
case 76:

         this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-7]+'\",\"type\":['+$$[$0-2]+'],\"params\":['+$$[$0-5]+'],\"body\":[]}';
    
break;
case 77:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"\",\"type\":[],\"params\":[],\"body\":['+$$[$0-1]+']}';
    
break;
case 78:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"\",\"type\":[],\"params\":['+$$[$0-4]+'],\"body\":['+$$[$0-2]+']}';
    
break;
case 81:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"\",\"type\":[],\"params\":[],\"body\":[]}';
    
break;
case 82:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"\",\"type\":[],\"params\":['+$$[$0-4]+'],\"body\":['+$$[$0-1]+']}';
    
break;
case 84:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"funcion\",\"name\":\"'+$$[$0-5]+'\",\"type\":[],\"params\":['+$$[$0-3]+'],\"body\":[]}';
    
break;
case 99:

                console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
                sintacticos.push('{\"token\":\"'+yytext+'\", \"linea\":\"'+this._$.first_line+'\", \"columna\":\"'+this._$.first_column+'\"}');
                this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"\"}';
              
break;
case 100: case 101:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"continue\"}';
    
break;
case 102: case 103:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"break\"}';
    
break;
case 104:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"return\", \"Expression\":[]}';
    
break;
case 105:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"return\", \"Expression\":[]}';
        
break;
case 106:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"return\", \"Expression\":['+$$[$0-1]+']}';
    
break;
case 107:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"return\", \"Expression\":['+$$[$0]+']}';
        
break;
case 108:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"switch\",\"Expression\":['+$$[$0-2]+'],\"values\":['+$$[$0]+']}';
    
break;
case 109: case 183: case 205: case 224:

        this.$ = $$[$0-1];
    
break;
case 112:

        this.$ = $$[$0-1] +',\n'+ $$[$0];
    
break;
case 113:

        this.$ = $$[$0-1] +',\n'+$$[$0];
    
break;
case 115:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"case\",\"Expression\":['+$$[$0-1]+'],\"body\":[]}';
    
break;
case 116:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"case\",\"Expression\":['+$$[$0-2]+'],\"body\":['+$$[$0]+']}';
    
break;
case 117: case 119:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"default\",\"Expression\":[],\"body\":[]}';
    
break;
case 118: case 120:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"default\",\"Expression\":[],\"body\":['+$$[$0]+']}';
    
break;
case 121:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"if\",\"Expression\":['+$$[$0-2]+'],\"body\":['+$$[$0]+'], \"else\":[]}';
    
break;
case 122:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"if\",\"Expression\":['+$$[$0-4]+'],\"body\":['+$$[$0-2]+'], \"else\":['+$$[$0]+']}';
    
break;
case 123:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"dowhile\",\"body\":['+$$[$0-5]+'],\"Expression\":['+$$[$0-2]+']}';
    
break;
case 124:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"dowhile\",\"body\":['+$$[$0-4]+'],\"Expression\":['+$$[$0-1]+']}';
        
break;
case 125:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"while\",\"body\":['+$$[$0]+'],\"Expression\":['+$$[$0-2]+']}';
    
break;
case 126:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"for\",\"ExpresionInitial\":['+$$[$0-6]+'],\"Expressionvalue\":['+$$[$0-4]+'],\"ExpressionFinal\":['+$$[$0-2]+'],\"body\":['+$$[$0]+']}';
    
break;
case 127:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"forin\",\"ExpresionInitial\":['+$$[$0-4]+'],\"Expressionvalue\":['+$$[$0-2]+'],\"body\":['+$$[$0]+']}';
    
break;
case 128:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"forin\",\"ExpresionInitial\":[{\"tipo\":['+$$[$0-5]+'],\"name\":\"'+$$[$0-4]+'\"}],\"Expressionvalue\":['+$$[$0-2]+'],\"body\":['+$$[$0]+']}';
    
break;
case 129:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"forof\",\"ExpresionInitial\":['+$$[$0-4]+'],\"Expressionvalue\":['+$$[$0-2]+'],\"body\":['+$$[$0]+']}';
    
break;
case 130:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"forof\",\"ExpresionInitial\":[{\"tipo\":['+$$[$0-5]+'],\"name\":\"'+$$[$0-4]+'\"}],\"Expressionvalue\":['+$$[$0-2]+'],\"body\":['+$$[$0]+']}';
    
break;
case 136: case 138: case 140:

        this.$ = $$[$0-2] +',\n'+$$[$0];
    
break;
case 141: case 162:

        this.$ = $$[$0-2]+',\n'+$$[$0];
    
break;
case 143:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"parameter\",\"name\":\"'+$$[$0-2]+'\",\"tipo\":['+$$[$0]+']}';
    
break;
case 144:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"parameter\",\"name\":\"'+$$[$0]+'\",\"tipo\":[]}';
    
break;
case 145:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"string\"}';
        
break;
case 146:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"number\"}';
        
break;
case 147:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"boolean\"}';
        
break;
case 148:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"void\"}';
        
break;
case 149:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"var\"}';
        
break;
case 150:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"const\"}';
        
break;
case 151:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"type\"}';
        
break;
case 152:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"'+$$[$0]+'\"}';
        
break;
case 153:

            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"let\"}';
        
break;
case 154:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":['+$$[$0-1]+'],\"size\":['+$$[$0]+']}';
    
break;
case 155:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":['+$$[$0]+'],\"size\":[]}';
    
break;
case 156: case 158:

        this.$ = $$[$0-1]+',\n'+$$[$0];
    
break;
case 157: case 229: case 284: case 288: case 294: case 296: case 297: case 298:

        this.$ =$$[$0];
    
break;
case 160:

       this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"\"}';
    
break;
case 161: case 202:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"arreglo\",\"value\":[]}';
    
break;
case 165:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"null\", \"value\":\"null\"}';
    
break;
case 166: case 167:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"boolean\", \"value\":\"'+$$[$0]+'\"}';
    
break;
case 168:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"number\", \"value\":\"'+$$[$0]+'\"}';
    
break;
case 169:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"string1\", \"value\":\"'+$$[$0]+'\"}';
    
break;
case 170:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"string2\", \"value\":\"'+$$[$0]+'\"}';
    
break;
case 171:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"tipo\":\"string3\", \"value\":\"'+$$[$0]+'\"}';
    
break;
case 172:

       this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"atributo\",\"name\":\"'+$$[$0-2]+'\", \"tipo\":[],\"valor\":['+$$[$0]+']}';
    
break;
case 173:

               this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"atributo\",\"name\":\"'+$$[$0-2]+'\", \"tipo\":['+$$[$0]+'],\"valor\":[]}';
           
break;
case 176:

        this.$ = $$[$0-2] +',\n'+$$[$0]
    
break;
case 178:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"typebody\",\"values\":[]}';
    
break;
case 179:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"typebody\",\"values\":['+$$[$0-1]+']}';
    
break;
case 182: case 215: case 219:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0]+'\"}';
    
break;
case 185:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"callAtributo\", \"value\":\"'+$$[$0-1]+'\", \"hijo\":['+$$[$0]+']}';
    
break;
case 186:

        var m = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0-1]+'\",\"hijo\":[]}';
        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"postincrement1\",\"padre\":['+m+']}';
    
break;
case 187:

        var m = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0-1]+'\",\"hijo\":[]}';
        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"postdecrement1\",\"padre\":['+m+']}';
    
break;
case 188:

            var m = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0]+'\",\"hijo\":[]}';
            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"predecrement1\",\"padre\":['+m+']}';
    
break;
case 189:

            var m = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0]+'\",\"hijo\":[]}';
            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"preincrement1\",\"padre\":['+m+']}';
    
break;
case 190:

            var m ='{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0-2]+'\", \"hijo\":['+$$[$0-1]+']}';
            this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"postincrement1\",\"padre\":['+m+']}';
    
break;
case 191:

                var m ='{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0-2]+'\", \"hijo\":['+$$[$0-1]+']}';
                this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"postdecrement1\",\"padre\":['+m+']}';
    
break;
case 192:

                    var m ='{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0-1]+'\", \"hijo\":['+$$[$0]+']}';
                    this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"predecrement1\",\"padre\":['+m+']}';
    
break;
case 193:

                    var m ='{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"variable\",\"value\":\"'+$$[$0-1]+'\", \"hijo\":['+$$[$0]+']}';
                    this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"preincrement1\",\"padre\":['+m+']}';
    
break;
case 194:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"nativeArray\", \"name\":\"'+$$[$0-4]+'\", \"hijo\":[],\"native\":\"pop\"}';
    
break;
case 195:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"nativeArray\", \"name\":\"'+$$[$0-2]+'\" ,\"hijo\":[],\"native\":\"length\"}';
    
break;
case 196:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"nativeArray\", \"name\":\"'+$$[$0-5]+'\" ,\"hijo\":[],\"native\":\"push\",\"value\":['+$$[$0-1]+']}';
    
break;
case 197:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"nativeArray\", \"name\":\"'+$$[$0-5]+'\", \"hijo\":['+$$[$0-4]+'],\"native\":\"pop\"}';
    
break;
case 198:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"nativeArray\", \"name\":\"'+$$[$0-3]+'\" ,\"hijo\":['+$$[$0-2]+'],\"native\":\"length\"}';
    
break;
case 199:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"nativeArray\", \"name\":\"'+$$[$0-6]+'\" ,\"hijo\":['+$$[$0-5]+'],\"native\":\"push\",\"value\":['+$$[$0-1]+']}';
    
break;
case 200:

             this.$ =  '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"asignation\",\"variable\":\"'+$$[$0-3]+'\",\"params\":['+$$[$0-2]+'],\"ValExpression\":['+$$[$0-1]+']}';
        
break;
case 201:

            this.$ =  '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"asignation\",\"variable\":\"'+$$[$0-2]+'\",\"params\":['+$$[$0-1]+'],\"ValExpression\":['+$$[$0]+']}';
        
break;
case 203:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"arreglo\",\"value\":['+$$[$0-1]+']}';
    
break;
case 204:

        this.$ = $$[$0-2] + ',' + $$[$0];
    
break;
case 207: case 226:

        this.$ = $$[$0-2] +',\n'+ $$[$0];
    
break;
case 210: case 213: case 217: case 221:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"callMatriz\", \"padre\":['+$$[$0-3]+'],\"posicion\":['+$$[$0-1]+']}';
    
break;
case 211: case 214: case 218: case 222:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"callAtributo\", \"padre\":['+$$[$0-2]+'],\"atributo\":\"'+$$[$0]+'\"}';
    
break;
case 216: case 220:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"callFuncion\",\"padre\":['+$$[$0-1]+'],\"argumentos\":['+$$[$0]+']}';
    
break;
case 223:

        this.$ = '';
    
break;
case 233:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"positivo\",\"Expression\":['+$$[$0]+']}';
    
break;
case 234:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"negativo\",\"Expression\":['+$$[$0]+']}';
    
break;
case 235:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"logical\",\"logical\":\"not\",\"Expression\":['+$$[$0]+']}';
    
break;
case 241: case 242: case 243: case 246: case 247: case 248: case 249: case 251: case 252: case 254: case 255:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"Aritmetic\",\"Aritmetic\":\"'+$$[$0-1]+'\",\"Expression1\":['+$$[$0-2]+'],\"Expression2\":['+$$[$0]+']}';
    
break;
case 244:

         this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"Aritmetic\",\"Aritmetic\":\"'+$$[$0-1]+'\",\"Expression1\":['+$$[$0-2]+'],\"Expression2\":['+$$[$0]+']}';
    
break;
case 257: case 258: case 260: case 261: case 263: case 264: case 266: case 267: case 268: case 269: case 271: case 272: case 273: case 274: case 276: case 277: case 278: case 279:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"Relational\",\"Relational\":\"'+$$[$0-1]+'\",\"Expression1\":['+$$[$0-2]+'],\"Expression2\":['+$$[$0]+']}';
    
break;
case 270: case 299:

        this.$=$$[$0];
    
break;
case 281: case 283: case 285: case 287: case 289: case 291:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"Logical\",\"Logical\":\"'+$$[$0-1]+'\",\"Expression1\":['+$$[$0-2]+'],\"Expression2\":['+$$[$0]+']}';
    
break;
case 293: case 295:

        this.$ = '{\"linea\":\"'+(yylineno+1)+'\",\"statement\":\"ternario\",\"valueExpression\":['+$$[$0-4]+'],\"Expression1\":['+$$[$0-2]+'],\"Expression2\":['+$$[$0]+']}';
    
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{1:[3]},{1:[2,1]},{1:[2,2]},{2:$V0,5:$Vp,6:46,7:45,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),{34:48,35:$Vr,45:49},{21:$Vs,23:$Vt,35:$Vu,36:51,37:52,40:59,41:53,42:67,43:$Vv,51:58,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,115:$VD,116:$VE},o($Vq,[2,34]),{35:[1,69]},{21:[1,70]},{23:[1,71]},{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,72],32:73,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{23:[1,88]},{2:$V0,6:89,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{23:[1,90]},{23:[1,91]},o([1,2,5,20,27,31,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97],[2,105],{24:93,52:94,164:95,160:96,156:97,149:98,144:99,142:100,136:101,132:102,128:103,130:104,82:105,122:109,124:110,112:111,62:112,113:114,102:117,114:118,38:120,23:$VH,26:[1,92],30:$VI,35:$VJ,43:$VK,60:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,115:$Vn,116:$Vo,131:$VT,133:$VU,134:$VV}),o($VW,[2,103],{26:[1,129]}),o($VW,[2,101],{26:[1,130]}),{23:[1,131]},o($Vq,[2,26]),o([1,2,5,20,25,26,27,30,31,35,46,53,54,55,56,57,58,59,60,64,65,66,67,73,74,76,77,78,79,80,90,91,92,93,94,95,96,97,115,116],[2,155],{48:132,98:133,43:$VX}),{35:[1,135]},{35:[1,136]},o($VY,[2,145]),o($VY,[2,146]),o($VY,[2,147]),o($VY,[2,148]),o($VY,[2,149]),o($VY,[2,150]),o($VY,[2,151]),o($VY,[2,153]),{1:[2,3]},{1:[2,4],2:$V0,5:$Vp,6:46,7:137,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{1:[2,6]},o($VW,[2,30],{26:[1,138]}),o($Vq,[2,48],{46:[1,139]}),o($VZ,[2,50],{51:58,98:133,48:141,37:142,43:$VX,47:[1,140],53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($Vq,[2,31]),o($VW,[2,33],{26:[1,143]}),o([1,2,5,20,25,26,27,30,31,35,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],[2,185],{51:58,42:67,37:147,40:148,21:[1,146],43:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,115:[1,144],116:[1,145]}),o($V_,[2,186]),o($V_,[2,187]),{35:$V$,117:[1,149],118:[1,150],119:[1,151]},{23:$VH,25:[1,153],30:$VI,35:$VJ,38:120,43:$VK,52:155,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,126:154,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,52:156,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($V01,[2,43]),o($V11,[2,62]),o($V11,[2,63]),o($V11,[2,64]),o($V11,[2,65]),o($V11,[2,66]),o($V11,[2,67]),o($V11,[2,68]),o([1,2,5,20,21,25,26,27,30,31,35,44,46,47,53,54,55,56,57,58,59,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],[2,45],{42:67,40:157,43:$Vv}),{23:$VH,24:158,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:[1,159]},{22:[1,160]},{25:[1,161]},o($Vq,[2,27]),{31:[1,162]},o($V21,[2,85],{33:18,38:20,50:34,63:74,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,32:163,2:$VF,5:$VG,20:$V1,26:$V2,27:$V3,30:$V4,35:$V5,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo}),o($V21,[2,87]),o($V31,[2,88]),o($V31,[2,89]),o($V31,[2,90]),o($V31,[2,91]),o($V31,[2,92]),o($V31,[2,93]),o($V31,[2,94]),o($V31,[2,95]),o($V31,[2,96]),o($V31,[2,97]),o($V31,[2,98]),o($V31,[2,99]),{23:$VH,24:164,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{79:[1,165]},{23:$VH,24:166,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:$VH,30:$VI,35:$V41,38:120,43:$VK,49:167,50:169,60:$VL,62:112,82:168,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110},o($Vq,[2,104]),o($VW,[2,107],{26:[1,171],46:$V51}),o($V61,[2,135]),o($V_,[2,297]),o([1,2,5,20,21,25,26,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,157],[2,292],{161:[1,174],165:[1,173]}),o($V71,[2,286],{157:$V81}),o($V91,[2,280],{150:$Va1,151:$Vb1,152:$Vc1,153:$Vd1}),o($Ve1,[2,265],{145:$Vf1,146:$Vg1}),o($Vh1,[2,256],{131:$Vi1,133:$Vj1}),o($Vk1,[2,250],{137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1}),o($V_,[2,240]),o($V_,[2,236]),o($V_,[2,237]),o($V_,[2,231]),{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:188,133:$VU,134:$VV},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:189,133:$VU,134:$VV},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:190,133:$VU,134:$VV},o($Vp1,[2,227],{21:[1,192],43:[1,191]}),o($Vp1,[2,228],{36:193,21:[1,195],23:$Vt,43:[1,194]}),o($V_,[2,208]),o($V_,[2,209]),o([1,2,5,20,23,25,26,27,30,31,35,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],[2,215],{41:53,40:59,42:67,21:$Vs,43:$Vv,115:$VD,116:$VE}),o($V_,[2,177]),{5:$Vq1,31:[1,196],35:$Vr1,110:198,111:197},{23:[1,201],35:[1,202]},o($V_,[2,180]),o($V_,[2,181]),{23:$VH,24:203,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($V_,[2,184]),o($V_,[2,165]),o($V_,[2,166]),o($V_,[2,167]),o($V_,[2,168]),o($V_,[2,169]),o($V_,[2,170]),o($V_,[2,171]),{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,44:[1,204],52:206,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,120:205,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($Vq,[2,102]),o($Vq,[2,100]),{23:$VH,24:207,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($VY,[2,154]),o($Vs1,[2,157],{99:208,98:209,5:$Vt1,43:$VX}),{44:[1,211]},o($Vp1,[2,188],{40:59,42:67,41:212,21:$Vu1,43:$Vv}),o($Vp1,[2,189],{40:59,42:67,41:214,21:$Vu1,43:$Vv}),{1:[2,5]},o($Vq,[2,29]),{34:215,35:$Vr,45:49},{33:216,35:$Vv1,50:34,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm},o($VZ,[2,53],{51:58,37:219,47:[1,218],53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VZ,[2,55]),o($Vq,[2,32]),o($V_,[2,190]),o($V_,[2,191]),{35:$Vw1,117:[1,220],118:[1,221],119:[1,222]},o([1,2,5,20,21,25,27,30,31,35,43,44,46,47,60,64,65,66,67,73,74,76,77,78,79,80,83,84,90,91,92,93,94,95,96,97,115,116,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],[2,201],{26:[1,224]}),o($V01,[2,40]),{23:[1,225]},o($V_,[2,195]),{23:[1,226]},o($V01,[2,42]),o($Vx1,[2,223]),{25:[1,227],46:[1,228]},o($Vy1,[2,225]),o($V_,[2,61]),o($V01,[2,44]),{44:[1,229],46:$V51},{25:[1,230],35:$Vz1,61:231,89:232},{23:[1,234]},o($VW,[2,23],{26:[1,235]}),o($Vq,[2,28]),o($V21,[2,86]),{25:[1,236],46:$V51},{23:[1,237]},{25:[1,238],46:$V51},{26:[1,239]},{83:[1,240],84:[1,241]},{35:[1,242]},o([23,31,35,46,83,84,131,133,137,138,139,140,145,146,150,151,152,153,157,161,165],$Vu,{41:53,40:59,42:67,21:$Vs,43:$Vv,115:$VD,116:$VE}),o($Vq,[2,106]),{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,52:243,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,52:244,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:245},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:246},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:247},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:248},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:249},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:250},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:251},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:252},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:253},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:254},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:255,133:$VU,134:$VV},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:256,133:$VU,134:$VV},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:257,133:$VU,134:$VV},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:258,133:$VU,134:$VV},o($V_,[2,233]),o($V_,[2,234]),o($V_,[2,235]),{23:$VH,24:259,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{35:[1,260]},o($Vx1,[2,216]),{23:$VH,24:261,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{35:[1,262]},o($V_,[2,178]),{31:[1,263]},{31:[2,175],46:[1,264]},{47:[1,265]},o($VA1,[2,174]),{25:[1,266],35:$Vz1,61:267,89:232},{23:[1,268]},{25:[1,269],46:$V51},o($V_,[2,202]),{44:[1,270],46:[1,271]},o($VB1,[2,206]),{25:[1,272],46:$V51},o($VC1,[2,156]),o($Vs1,[2,159],{98:209,99:273,5:$Vt1,43:$VX}),o($VC1,[2,160]),o($VC1,[2,161]),o($Vp1,[2,192],{42:67,40:148,21:$VD1,43:$Vv}),{35:$V$},o($Vp1,[2,193],{42:67,40:148,21:$VD1,43:$Vv}),o($Vq,[2,47]),o($VZ,[2,49],{51:58,98:133,48:275,37:276,43:$VX,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VY,$Vu),{33:277,35:$Vv1,50:34,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm},o($VZ,[2,58]),{23:[1,278]},o($V_,[2,198]),{23:[1,279]},o($V01,[2,41]),o($V_,[2,200]),{25:[1,280]},{23:$VH,24:281,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($Vx1,[2,224]),{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,52:282,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($V01,[2,46]),{30:[1,283],47:[1,284]},{25:[1,285]},{25:[2,142],46:[1,286]},o($Vy1,[2,144],{47:[1,287]}),{23:$VH,24:288,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($Vq,[2,21]),{2:$V0,6:289,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{23:$VH,24:290,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{2:$V0,6:291,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{23:$VH,24:293,26:$VE1,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,81:292,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:$VH,24:294,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:$VH,24:295,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{37:299,47:[1,298],51:58,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,83:[1,296],84:[1,297]},o($V61,[2,136]),{47:[1,300]},o($V71,[2,287],{157:$V81}),o($V91,[2,281],{150:$Va1,151:$Vb1,152:$Vc1,153:$Vd1}),o($Ve1,[2,266],{145:$Vf1,146:$Vg1}),o($Ve1,[2,267],{145:$Vf1,146:$Vg1}),o($Ve1,[2,268],{145:$Vf1,146:$Vg1}),o($Ve1,[2,269],{145:$Vf1,146:$Vg1}),o($Vh1,[2,257],{131:$Vi1,133:$Vj1}),o($Vh1,[2,258],{131:$Vi1,133:$Vj1}),o($Vk1,[2,251],{137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1}),o($Vk1,[2,252],{137:$Vl1,138:$Vm1,139:$Vn1,140:$Vo1}),o($V_,[2,241]),o($V_,[2,242]),o($V_,[2,243]),o($V_,[2,244]),{44:[1,301],46:$V51},o($V_,[2,211]),{44:[1,302],46:$V51},o($Vx1,[2,218]),o($V_,[2,179]),{5:$Vq1,35:$Vr1,110:198,111:303},{23:$VH,30:$VI,35:$V41,38:120,43:$VK,50:305,52:304,60:$VL,62:112,82:105,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{30:[1,306]},{25:[1,307]},{25:[1,308],35:$Vz1,61:309,89:232},o($V_,[2,183]),o($V_,[2,203]),{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,52:310,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{30:[1,312],68:311},o($VC1,[2,158]),{35:$Vw1},o($VZ,[2,52],{51:58,37:313,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VZ,[2,54]),o($VZ,[2,51],{51:58,37:314,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),{25:[1,315]},{23:$VH,24:316,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($V_,[2,194]),{25:[1,317],46:$V51},o($Vy1,[2,226]),{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,319],32:318,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{33:320,35:$Vv1,50:34,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm},{30:[1,321],47:[1,322]},{35:$Vz1,61:323,89:232},{33:324,35:$Vv1,50:34,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm},{25:[1,325],46:$V51},o([1,2,5,20,26,27,30,31,35,60,64,65,66,67,73,74,76,78,79,80,90,91,92,93,94,95,96,97,115,116],[2,121],{77:[1,326]}),{25:[1,327],46:$V51},o($Vq,[2,125]),{26:[1,328]},o([25,26],[2,132],{46:$V51}),{25:[1,329],46:$V51},{25:[1,330],46:$V51},{23:$VH,24:331,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{23:$VH,24:332,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{33:333,35:$Vv1,50:34,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm},{26:[2,60]},{23:$VH,30:$VI,35:$VJ,38:120,43:$VK,52:334,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},o($V_,[2,210]),o($Vx1,[2,217]),{31:[2,176]},o($VA1,[2,172]),o($VA1,[2,173]),{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,336],32:335,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{30:[1,337]},{30:[1,338]},{25:[1,339]},o($VB1,[2,207]),o($Vq,[2,108]),{31:[2,110],69:340,70:341,72:342,73:$VF1,74:$VG1},o($VZ,[2,57]),o($VZ,[2,56]),o($V_,[2,197]),{25:[1,345],46:$V51},o($V_,[2,196]),{31:[1,346]},o($Vq,[2,73]),{30:[1,347]},{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,349],32:348,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{33:350,35:$Vv1,50:34,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm},{25:[2,141]},o($Vy1,[2,143]),o($VW,[2,22],{26:[1,351]}),{2:$V0,6:352,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},o($VW,[2,124],{26:[1,353]}),{23:$VH,24:293,25:$VE1,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,81:354,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{2:$V0,6:355,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{2:$V0,6:356,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{25:[1,357],46:$V51},{25:[1,358],46:$V51},{37:359,51:58,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC},o($V_,[2,293]),{31:[1,360]},o($V_,[2,81]),{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,32:361,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,363],32:362,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{30:[1,364]},{31:[1,365]},{31:[2,111]},{31:[2,114],70:366,72:342,73:$VF1,74:$VG1},{23:$VH,24:367,30:$VI,35:$VJ,38:120,43:$VK,52:94,60:$VL,62:112,82:105,102:117,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,112:111,113:114,114:118,115:$Vn,116:$Vo,122:109,124:110,128:103,130:104,131:$VT,132:102,133:$VU,134:$VV,136:101,142:100,144:99,149:98,156:97,160:96,164:95},{47:[1,368]},o($V_,[2,199]),o($Vq,[2,69]),{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,370],32:369,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{31:[1,371]},o($Vq,[2,74]),{30:[1,372]},o($Vq,[2,20]),o($Vq,[2,122]),o($Vq,[2,123]),{25:[1,373]},o($Vq,[2,127]),o($Vq,[2,129]),{2:$V0,6:374,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{2:$V0,6:375,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{26:[2,59]},o($V_,[2,77]),{31:[1,376]},{31:[1,377]},o($V_,[2,83]),{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,379],32:378,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},o($Vq,[2,109]),{31:[2,113]},{46:$V51,47:[1,380]},o($V21,[2,117],{33:18,38:20,50:34,63:74,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,32:381,2:$VF,5:$VG,20:$V1,26:$V2,27:$V3,30:$V4,35:$V5,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo}),{31:[1,382]},o($Vq,[2,75]),o($Vq,[2,70]),{2:$VF,5:$VG,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,20:$V1,26:$V2,27:$V3,30:$V4,31:[1,384],32:383,33:18,35:$V5,38:20,50:34,63:74,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},{2:$V0,6:385,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,26:$V2,27:$V3,30:$V4,33:18,35:$V5,38:20,50:34,60:$V6,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo},o($Vq,[2,128]),o($Vq,[2,130]),o($V_,[2,78]),o($V_,[2,79]),{31:[1,386]},o($V_,[2,84]),o($V21,[2,115],{33:18,38:20,50:34,63:74,8:76,9:77,11:78,12:79,13:80,14:81,15:82,16:83,17:84,18:85,19:86,32:387,2:$VF,5:$VG,20:$V1,26:$V2,27:$V3,30:$V4,35:$V5,64:$V7,65:$V8,66:$V9,67:$Va,76:$Vb,78:$Vc,79:$Vd,80:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:$Vj,95:$Vk,96:$Vl,97:$Vm,115:$Vn,116:$Vo}),o($V21,[2,118]),o($Vq,[2,71]),{31:[1,388]},o($Vq,[2,76]),o($Vq,[2,126]),o($V_,[2,80]),o($V21,[2,116]),o($Vq,[2,72])],
defaultActions: {2:[2,1],3:[2,2],45:[2,3],47:[2,6],137:[2,5],299:[2,60],303:[2,176],323:[2,141],341:[2,111],359:[2,59],366:[2,113]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var lexicos = [];
    var sintacticos = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment*/
break;
case 1:"*/"               /* ignore c-style comment*/
break;
case 2:/* skip whitespace */
break;
case 3:/* skip retorno de carro */
break;
case 4:/* skip salto linea */
break;
case 5:/* skip tabulacion */
break;
case 6:return 103
break;
case 7:return 104
break;
case 8:return 105
break;
case 9:return 95
break;
case 10:return 97
break;
case 11:return 94
break;
case 12:return 91
break;
case 13:return 92
break;
case 14:return 90
break;
case 15:return 93
break;
case 16:return 96
break;
case 17:return 20
break;
case 18:return 22
break;
case 19:return 27
break;
case 20:return 65
break;
case 21:return 64
break;
case 22:return 74
break;
case 23:return 73
break;
case 24:return 67
break;
case 25:return 60
break;
case 26:return 76
break;
case 27:return 78
break;
case 28:return 79
break;
case 29:return 77
break;
case 30:return 80
break;
case 31:return 84
break;
case 32:return 83
break;
case 33:return 66
break;
case 34:return 119
break;
case 35:return 117
break;
case 36:return 118
break;
case 37:return 54
break;
case 38:return 55
break;
case 39:return 57
break;
case 40:return 56
break;
case 41:return 58
break;
case 42:return 59
break;
case 43:return 150
break;
case 44:return 151
break;
case 45:return 152
break;
case 46:return 153
break;
case 47:return 146
break;
case 48:return 145
break;
case 49:return 161
break;
case 50:return 157
break;
case 51:return 134
break;
case 52:return 115
break;
case 53:return 116
break;
case 54:return 139
break;
case 55:return 131
break;
case 56:return 133
break;
case 57:return 137
break;
case 58:return 138
break;
case 59:return 140
break;
case 60:return 35
break;
case 61:return 106;
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 107; 
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 108; 
break;
case 64: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 109; 
break;
case 65:return 53
break;
case 66:return 26
break;
case 67:return 47
break;
case 68:return 46
break;
case 69:return 21
break;
case 70:return 23
break;
case 71:return 25
break;
case 72:return 43
break;
case 73:return 44
break;
case 74:return 30
break;
case 75:return 31
break;
case 76:return 165
break;
case 77:return 5;
break;
case 78:
                                                                        console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+';');
                                                                        lexicos.push('{\"token\":\"' + yy_.yytext + '\", \"linea\": \"' + yy_.yylloc.first_line + '\", \"columna\": \"' + yy_.yylloc.first_column+'\"}');
                                                                
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*[^"*\/"]*)/i,/^(?:\s+)/i,/^(?:\\r)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:const\b)/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:type\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:graficar_ts\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:switch\b)/i,/^(?:function\b)/i,/^(?:if\b)/i,/^(?:Do\b)/i,/^(?:While\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:return\b)/i,/^(?:Push\b)/i,/^(?:Pop\b)/i,/^(?:Length\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\/=)/i,/^(?:\*=)/i,/^(?:\^=)/i,/^(?:%=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:[a-zA-Z_\$][a-zA-Z0-9_\$]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"[^\"]*")/i,/^(?:`[^\`]*`)/i,/^(?:'[^\']*')/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = WE;
exports.Parser = WE.Parser;
exports.parse = function () { return WE.parse.apply(WE, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}